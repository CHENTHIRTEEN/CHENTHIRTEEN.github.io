<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构（01绪论）</title>
    <link href="/2021/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%8801%E7%BB%AA%E8%AE%BA%EF%BC%89/"/>
    <url>/2021/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%8801%E7%BB%AA%E8%AE%BA%EF%BC%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器学习（一）</title>
    <link href="/2021/09/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/09/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><em>听课时候随手记的，整理自黄海广博士的机器学习课程 ：)</em></p><p>机器学习流程：</p><pre><code class=" mermaid">graph LR;数据搜集 --&gt; 数据清洗 --&gt; 特征工程 --&gt; 数据建模</code></pre><p>前三个部分日常最多 80%-90%时间</p><p>数学建模需要最多的知识</p><h3 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h3><ul><li>回归问题：标签连续</li><li>分类问题：标签离散</li></ul><h2 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h2><h3 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h3><ul><li>线性模型</li><li>找到直线、平面、或者超平面是的预测值与真实值之间误差最小</li><li>距离为 0 则完全拟合</li></ul><h3 id="符号约定"><a href="#符号约定" class="headerlink" title="符号约定"></a>符号约定</h3><ul><li><strong>m：训练集中的样本数量</strong></li><li><strong>n：特征数量</strong></li><li><strong>x：特征/输入变量</strong></li><li><strong>y：目标变量/输出变量</strong></li><li><strong>（x， y）：训练集中的样本</strong></li></ul><p>默认为列向量</p><ul><li><strong>$x^{(i)}$：特征矩阵中的第 i 行（默认为列向量）</strong></li><li><strong>$x^{(i)}_j$：矩阵中第 i 行第 j 个特征</strong></li><li><strong>$h：$代表学习算法的解决方案或函数也成为假设</strong></li><li><strong>$\widehat{y}=h(x) $：代表预测值</strong></li><li><strong>$h：$学习算法的解决方案或函数，也成为假设</strong></li><li>$\hat{y} = h(x):$ <strong>预测的值</strong></li></ul><h4 id="最小二乘法"><a href="#最小二乘法" class="headerlink" title="最小二乘法"></a>最小二乘法</h4><script type="math/tex; mode=display">h(x) = w_0 + w_1x_1 + w_2x_2 + ... + w_nx_n</script><ul><li>找到一组</li></ul><script type="math/tex; mode=display">w(w_0, w_1, w_2,..., w_n)</script><ul><li>使得残差平方和</li></ul><script type="math/tex; mode=display">J(w) = \frac{1}{2} {\textstyle \sum_{i = 1}^{m}}(h(x^{(i)}) - y^{(i)})^{2}</script><p>最小，即最小化$\frac{\partial J(w)}{\partial w}.$</p><ul><li>将上式转换为矩阵形式</li></ul><script type="math/tex; mode=display">J(w) = \frac{1}{2}(Xw - Y)^{2}</script><ul><li>其中$X$为$m$行$n+1$列的矩阵（$m为样本个数， n为特征个数$）</li><li>$w为n+1行1列的矩阵（包含w_0）,Y为m行1列的矩阵$</li></ul><p><strong>根据向量的性质：</strong></p><script type="math/tex; mode=display">\sum_{i}Z_{i}^2 = Z^TZ</script><p><strong>可以得到：</strong></p><script type="math/tex; mode=display">J(w) = \frac{1}{2}(Xw - Y)^{2} = \frac{1}{2}(Xw - Y)^{T}(Xw - Y)</script><p><strong>未来最小化$J(w)$，对其求偏导：</strong></p><script type="math/tex; mode=display">\frac{\partial J(w)}{\partial w} = \frac{1}{2} \frac{\partial}{\partial w} (Xw - Y)^T(Xw - Y) = \frac{1}{2} \frac{\partial}{\partial w} (w^TX^TXw - {\color{Red} Y^TXw  - w^TX^TY} + Y^TY)</script><p><strong>红色两项互为转置</strong></p><script type="math/tex; mode=display">\frac{\partial J(w)}{\partial w} = \frac{1}{2} \frac{\partial}{\partial w}  (w^TX^TXw - 2w^TX^TY + Y^TY) = \frac{1}{2}(2X^TXw - 2X^Ty + 0)\\=X^TXw - X^Ty</script><script type="math/tex; mode=display">令 \frac{\partial J(w)}{\partial w} = 0</script><p>则有</p><script type="math/tex; mode=display">w = (X^TX)^{-1}X^Ty</script><p><strong><em>注意以下法则</em></strong></p><script type="math/tex; mode=display">\frac{dX^TX}{dX} = 2X</script><script type="math/tex; mode=display">\frac{dAX}{dX}</script><script type="math/tex; mode=display">\frac{\partial X^TAX}{\partial X} = (A + A^T)X,    若A为对称矩阵， \frac{\partial X^TAX}{\partial X} = 2AX</script><hr><h4 id="批量梯度下降"><a href="#批量梯度下降" class="headerlink" title="批量梯度下降"></a>批量梯度下降</h4><ul><li><strong>梯度下降的每一步都是用所有训练样本</strong></li></ul><p><strong><em>参数更新</em></strong>：（同步更新$w_j$(j = 0,1,……,n)）</p><script type="math/tex; mode=display">w_j:=w_j - \alpha \frac {1}{m} \sum_{i = 1}^{m}((h(x^{(i)}) - y^{(i)}) \cdot x^{(i)}_j)</script><h4 id="随机梯度下降"><a href="#随机梯度下降" class="headerlink" title="随机梯度下降"></a>随机梯度下降</h4><h5 id="梯度的推导："><a href="#梯度的推导：" class="headerlink" title="梯度的推导："></a>梯度的推导：</h5><script type="math/tex; mode=display">w = w - \alpha \cdot \frac{\partial J(w)}{\partial w}</script><p><strong>由最小二乘法：</strong></p><script type="math/tex; mode=display">h(x) = w_0 + w_1x_1 + w_2x_2 + ... + w_nx_n</script><p><strong>得到残差平方：</strong></p><script type="math/tex; mode=display">J(w) = \frac{1}{2} (h(x^{(i)}) - y^{(i)})^{2}</script><script type="math/tex; mode=display">\frac{\partial}{\partial w_j} J(w) = \frac{\partial}{\partial w_j} \frac{1}{2}(h(x^{(i)}) - y^{(i)})^{2} = 2 \cdot \frac{1}{2}(h(x^{(i)}) - y^{(i)})\cdot \frac{\partial}{\partial w_j}(h(x^{(i)}) - y^{(i)})</script><script type="math/tex; mode=display">=(h(x^{(i)}) - y^{(i)}) \cdot \frac{\partial}{\partial w_j}(\sum_{i = 0}^{n} (w_i x^{(i)}_i -y^{(i)}))</script><script type="math/tex; mode=display">=(h(x^{(i)}) - y^{(i)})x^{(i)}_j</script><p><strong><em>随机梯度下降每一步用到一个样本，在每次计算中都更新参数，不需要提前对训练集求和</em></strong></p><p><strong><em>参数更新：</em></strong></p><script type="math/tex; mode=display">w_j:=w_j-\alpha(h(x^{(i)}) - y^{(i)})x^{(i)}_j</script><h4 id="小批量梯度下降"><a href="#小批量梯度下降" class="headerlink" title="小批量梯度下降"></a>小批量梯度下降</h4><p><strong><em>每一步用到一定批量的训练样本，每计算 b 次训练样本，更新一次参数 w</em></strong></p><p><strong><em>参数更新：</em></strong></p><script type="math/tex; mode=display">w_j:=w_j - \alpha \frac{1}{b} \sum_{k = 1}^{i+b-1}(h(x^{(i)}) - y^{(i)})x^{(i)}_j</script><p><strong>注意：</strong></p><p><strong>b = 1 (随机梯度下降，SGD)</strong></p><p><strong>b = m (批量梯度下降，BGD)</strong></p><p><strong>b = batch_size，通常为 2 的指数倍，常见为 32，64，128……（小批量梯度下降，MBGD）</strong></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>最小二乘法</strong></p><ul><li>只适用线性模型</li><li><p>特征值较多时矩阵计算代价过大（矩阵计算时间复杂度为$O(n^3)$当 n 小于 10000 可以接受）</p></li><li><p>不需要选择学习率$\alpha$</p></li><li>只需要一次计算</li></ul><p><strong>梯度下降</strong></p><ul><li>适用于各种模型</li><li>特征值较多时也适用</li><li>需要选择学习率</li><li>需要多次计算</li></ul><hr><h4 id="数据归一化"><a href="#数据归一化" class="headerlink" title="数据归一化"></a>数据归一化</h4><p><strong><em>归一化（最大-最小规范化）</em></strong></p><script type="math/tex; mode=display">x^{*} = \frac{x - x_{min}}{x_{max} - x_{min}}</script><p>将数据映射到[0,1]区间</p><p>数据归一化的目的是使得各特征对目标变量的影响一致，将特征数据进行伸缩变化，数据归一化是会 改变特征数据分布。</p><h4 id="数据标准化"><a href="#数据标准化" class="headerlink" title="数据标准化"></a>数据标准化</h4><p><strong><em>Z-Score 标准化</em></strong></p><script type="math/tex; mode=display">x^{*} = \frac{x - \mu}{\sigma}</script><p><strong><em>其中：</em></strong></p><script type="math/tex; mode=display">{\textstyle \sigma}^{2} = \frac{1}{m} \sum_{i = 1}^{m}(x^{(i)})^2</script><script type="math/tex; mode=display">\mu = \frac{1}{m} \sum_{i = 1}^{m}x^{(i)}</script><ul><li><p>经过标准化后，数据均值为 0，方差为 1</p></li><li><p>标准化使不同特征具有可比性</p></li><li>标准化后的特征数据分布没有发生变化</li><li>当数据特征取值范围或单位差异较大时，需要做一下标准化处理</li></ul><h5 id="需要数据归一化-标准化"><a href="#需要数据归一化-标准化" class="headerlink" title="需要数据归一化/标准化"></a>需要数据归一化/标准化</h5><ul><li>线性模型</li><li>基于度量的模型（KNN，K-means 聚类、感知机、SVM）</li></ul><h5 id="不需要归一化-标准化"><a href="#不需要归一化-标准化" class="headerlink" title="不需要归一化/标准化"></a>不需要归一化/标准化</h5><ul><li>决策树</li><li>基于决策树的集成学习模型（基于 Boosting、Bagging 等对于特征值大小不敏感的模型）例如 XGBoost、LightGBM、朴素贝叶斯等</li></ul><hr><h3 id="过拟合的处理"><a href="#过拟合的处理" class="headerlink" title="过拟合的处理"></a>过拟合的处理</h3><ul><li>更多的训练数据</li></ul><p>使用更多的训练数据是解决过拟合问题最有效的手段，因为更多的样本能够让模型学习到更多更有效的特征，减小噪声的影响。</p><ul><li>降维</li></ul><p>即丢弃一些不能帮助我们正确预测的特征。可以是手工选择保留哪些特征，或者使用一些模型选择的算法来帮忙（例如 PCA)</p><ul><li>正则化</li></ul><p>正则化技术，保留所有的特征，但是减少参数的大小（ magnitude），它可以改善或者减少过拟合问题。</p><ul><li>集成学习</li></ul><p>集成学习是把多个模型集成在一起，来降低单一模型的过拟合风险。</p><h3 id="欠拟合的处理"><a href="#欠拟合的处理" class="headerlink" title="欠拟合的处理"></a>欠拟合的处理</h3><ul><li>添加新特征</li></ul><p>当特征不足或者现有特征与样本标签的相关性不强时，模型容易出现欠拟合。通过挖掘组合特征等新的特征，往往能够取得更好的效果。</p><ul><li>增加模型复杂度</li></ul><p>简单模型的学习能力较差，通过增加模型的复杂度可以使模型拥有更强的拟合能力。例如，在线性模型中添加高次项，在神经网络模型中增加网络层数或神经元个数等。</p><ul><li>减少正则化系数</li></ul><p>正则化是用来防止过拟合的，但当模型出现欠拟合现象时，则需要有针对性地减小正则化系数。</p><hr><h3 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h3><h4 id="L-1-正则化（Lasso-回归）"><a href="#L-1-正则化（Lasso-回归）" class="headerlink" title="$L_1$正则化（Lasso 回归）"></a>$L_1$正则化（Lasso 回归）</h4><p><strong>$L_1$正则化在损失函数中加入权值的绝对值之和，目的是使权重稀疏，防止欠拟合</strong></p><script type="math/tex; mode=display">J(w) = \frac{1}{2} {\textstyle \sum_{i = 1}^{m}}(h(x^{(i)}) - y^{(i)})^{2} + \lambda {\textstyle \sum_{j = 1}^{n}}|w_j|</script><h4 id="L-2-正则化（岭回归）"><a href="#L-2-正则化（岭回归）" class="headerlink" title="$L_2$正则化（岭回归）"></a>$L_2$正则化（岭回归）</h4><p><strong>$L_2$正则化在损失函数中加入权值的平方和，可以使权重平滑，防止过拟合</strong></p><script type="math/tex; mode=display">J(w) = \frac{1}{2} {\textstyle \sum_{i = 1}^{m}}(h(x^{(i)}) - y^{(i)})^{2} + \lambda {\textstyle \sum_{j = 1}^{n}}w_j</script><hr><h3 id="回归的评价指标"><a href="#回归的评价指标" class="headerlink" title="回归的评价指标"></a>回归的评价指标</h3><p><strong>指标中$y^{(i)}$和$\widehat{y}^{(i)} $表示第 i 个样本的真实值和预测值，m 为样本个数</strong></p><ul><li>均方误差（Mean Square Error,MSE）</li></ul><script type="math/tex; mode=display">MSE = \frac{1}{m} \sum_{i=1}^{m}(y^{(i)} - \widehat{y}^{(i)})^{(2)}</script><ul><li>均方根误差（Root Mean Square Error，RMSE）</li></ul><script type="math/tex; mode=display">RMSE(y,\widehat{y}) = \sqrt{\frac{1}{m} \sum_{i=1}^{m}(y^{(i)} - \widehat{y}^{(i)})^{2}}</script><ul><li>平均绝对误差（Mean Absolute Error，MAE）</li></ul><script type="math/tex; mode=display">MAE(y,\widehat{y}) = \frac{1}{m} \sum_{i = 1}^{m}|y^{(i)} - \widehat{y}^{(i)}|</script><ul><li>R 方【RSquared(r2score)】</li></ul><script type="math/tex; mode=display">SSR = \sum_{i = 0}^{m}(\widehat{y}^{(i)} - \bar{y})^2</script><script type="math/tex; mode=display">SSE = \sum_{i=0}^{m}(y^{(i)}  - \widehat{y}^{(i)})^2</script><script type="math/tex; mode=display">SST = \sum_{i = 0}^{m}(y^{(i)} - \bar{y})^2</script><script type="math/tex; mode=display">R^2(y,\widehat{y})=1-\frac{\sum_{i=0}^{m}\left(y^{(i)}-\widehat{y}^{(i)}\right)^{2}}{\sum_{i=0}^{m}\left(y^{(i)}-\bar{y}\right)^{2}}</script><script type="math/tex; mode=display">=\frac{SSR}{SST} = 1-\frac{SSE}{SST}</script><script type="math/tex; mode=display">R^2(y,\widehat{y}) = 1-\frac{\sum_{i=0}^{m}\left(y^{(i)}-\widehat{y}^{(i)}\right)^{2} / m}{\sum_{i=0}^{m}\left(y^{(i)}-\bar{y}\right)^{2} / m}</script><script type="math/tex; mode=display">=1-\frac{MSE}{Var}</script><p><strong>越接近 1 说明模型拟合越好</strong></p>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
      <category>线性回归</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统入门（一）</title>
    <link href="/2021/08/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/08/30/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="操作系统介绍"><a href="#操作系统介绍" class="headerlink" title="操作系统介绍"></a>操作系统介绍</h3><h4 id="程序运行时会发生什么？"><a href="#程序运行时会发生什么？" class="headerlink" title="程序运行时会发生什么？"></a>程序运行时会发生什么？</h4><p><strong><em>Von Neumann计算模型基本理念：</em></strong></p><pre><code class=" mermaid">graph LR;取指令 --&gt; 解码 --&gt; 执行</code></pre><p>完成一条指令后，处理器将继续执行下一条指令，直到程序完成运行。</p><p><strong><em>一种允许程序与设备交互，让程序共享内存，使程序运行变得容易的软件</em></strong>，这种软件被称为操作系统(<strong>Operating System, OS</strong> ),操作系统负责确保系统既易于使用又高效的运行。</p><h4 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h4><blockquote><p><strong><em>关键问题：如何实现资源的虚拟化？</em></strong></p></blockquote><ul><li><p><strong>通过虚拟化技术(virtualization)将物理资源(cpu、内存、磁盘等)转换为虚拟形式，因此有时也将操作系统称为虚拟机。</strong></p></li><li><p><strong>为了方便用户使用，操作系统提供了一个标准库(standard library)，其中包含几百个系统调用（也称之为接口(API)），以供程序调用来实现程序的运行、物理资源的访问等。</strong></p></li><li><strong>虚拟化让多个程序运行时共享物理资源，操作系统也被称为资源管理器，cpu，磁盘等都是系统的资源，操作系统主要扮演资源的管理者，做到高效或者公平。</strong></li></ul><h5 id="实例1：CPU的虚拟化"><a href="#实例1：CPU的虚拟化" class="headerlink" title="实例1：CPU的虚拟化"></a>实例1：CPU的虚拟化</h5><p>查看如下代码:</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;common.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>) &#123;<br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: cpu &lt;string&gt;\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">char</span> *str = argv[<span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, str);<br>Spin(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>该程序简单调用Spin()函数，反复检查时间并在运行一秒后返回，接着在屏幕上打印。</p><ul><li>查看运行结果(之后所有代码运行环境皆为Ubuntu20.04)</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ ./cpu <span class="hljs-string">&quot;a&quot;</span><br>a<br>a<br>a<br>a<br>^C<br></code></pre></div></td></tr></table></figure><p>运行时该程序会重复检查时间，直到一秒后，该程序会打印用户输入的参数，并且继续运行。</p><h5 id="实例2：内存的虚拟化"><a href="#实例2：内存的虚拟化" class="headerlink" title="实例2：内存的虚拟化"></a>实例2：内存的虚拟化</h5><p>现代及其提供的物理内存模型非常简单，内存就是一个字节数组，通过地址访问相应的数据，进行更新或者写入操作时还需要给定相应地址的数据。程序运行时所有结构都保存在内存中，并且通过各种指令来访问，每次读取指令都会访问内存。</p><p>查看如下代码：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;common.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>) &#123; <br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: mem &lt;value&gt;\n&quot;</span>); <br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>); <br>    &#125; <br>    <span class="hljs-keyword">int</span> *p; <br>    p = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<br>    assert(p != <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(%d) addr pointed to by p: %p\n&quot;</span>, (<span class="hljs-keyword">int</span>) getpid(), p);<br>    *p = atoi(argv[<span class="hljs-number">1</span>]); <span class="hljs-comment">// assign value to addr stored in p</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>Spin(<span class="hljs-number">1</span>);<br>*p = *p + <span class="hljs-number">1</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(%d) value of p: %d\n&quot;</span>, getpid(), *p);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>该程序使用malloc()分配一些内存，运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ ./mem 1<br>(427) addr pointed to by p: 0x55f4929532a0<br>(427) value of p: 2<br>(427) value of p: 3<br>(427) value of p: 4<br>(427) value of p: 5<br>(427) value of p: 6<br>(427) value of p: 7<br>^C<br></code></pre></div></td></tr></table></figure><p>该程序首先分配一些内存，之后打印出内存对应的地址，将数字0放入分配的内存中第一个空位，最后延迟一秒并递增p中保存的地址值，每个语句还会打印正在运行程序的标识符(PID)，对于每个进程<strong>PID为唯一</strong>。</p><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><blockquote><p>关键问题：如何构建正确的并发程序</p><p>如何构建正确的程序？操作系统需要提供什么？硬件需要有什么机制？如何利用他们解决并发问题？</p></blockquote><ul><li>一个多线程程序</li></ul><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;common.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;common_threads.h&quot;</span></span><br><br><span class="hljs-keyword">volatile</span> <span class="hljs-keyword">int</span> counter = <span class="hljs-number">0</span>; <br><span class="hljs-keyword">int</span> loops;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">worker</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *arg)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; loops; i++) &#123;<br>counter++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">2</span>) &#123; <br><span class="hljs-built_in">fprintf</span>(<span class="hljs-built_in">stderr</span>, <span class="hljs-string">&quot;usage: threads &lt;loops&gt;\n&quot;</span>); <br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>); <br>    &#125; <br>    loops = atoi(argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">pthread_t</span> p1, p2;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Initial value : %d\n&quot;</span>, counter);<br>    Pthread_create(&amp;p1, <span class="hljs-literal">NULL</span>, worker, <span class="hljs-literal">NULL</span>); <br>    Pthread_create(&amp;p2, <span class="hljs-literal">NULL</span>, worker, <span class="hljs-literal">NULL</span>);<br>    Pthread_join(p1, <span class="hljs-literal">NULL</span>);<br>    Pthread_join(p2, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Final value   : %d\n&quot;</span>, counter);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>主程序利用Pthread_create()创建两个线程，每个线程都在work()函数中运行，由用户的输入决定work()函数中循环的运行次数，最后输出玄幻次数counter，查看不同参属下运行的次数：</p><ul><li>loop = 1000</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ ./threads 1000<br>Initial value : 0<br>Final value   : 2000<br></code></pre></div></td></tr></table></figure><ul><li>loop = 5000</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ ./threads 5000<br>Initial value : 0<br>Final value   : 10000<br></code></pre></div></td></tr></table></figure><ul><li>loop = 10000</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ ./threads 10000<br>Initial value : 0<br>Final value   : 20000<br></code></pre></div></td></tr></table></figure><ul><li>loop = 100000</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ ./threads 100000<br>Initial value : 0<br>Final value   : 106116<br>$ ./threads 100000<br>Initial value : 0<br>Final value   : 127115<br></code></pre></div></td></tr></table></figure><p>可以看到当循环次数较小时候，当loop = n时，输出为2n，这非常好理解，因为共有两个线程，当loop值更大时，我们使输入为100000，最终结果不为200000，并且再次运行，结果又产生了不同。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; loops; i++)<br></code></pre></div></td></tr></table></figure><p>造成这种现象的原因是该语句的执行过程需要三条指令集控制：</p><pre><code class=" mermaid">graph LR;将数值加载到寄存器 --&gt; 将数值递增 --&gt; 将数值放回内存</code></pre><p><strong><em>这一过程不具有原子性(automically)</em></strong>。</p><h4 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h4><blockquote><p>关键问题：如何持久的存储数据</p><p>持久性的实现需要哪些技术？那些策略和机制能高性能的实现持久性？面对软硬件故障如何实现可靠性？</p></blockquote><p>操作系统中的磁盘管理软件称为文件系统，负责将用户创建的任何文件存储在磁盘上。     </p><p>操作系统不会为磁盘创建虚拟资源，用户之间需要共享文件系统中的信息，查看如下代码：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> fd = open(<span class="hljs-string">&quot;/tmp/file&quot;</span>, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR);<br>    assert(fd &gt;= <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">char</span> buffer[<span class="hljs-number">20</span>];<br>    <span class="hljs-built_in">sprintf</span>(buffer, <span class="hljs-string">&quot;hello world\n&quot;</span>);<br>    <span class="hljs-keyword">int</span> rc = write(fd, buffer, <span class="hljs-built_in">strlen</span>(buffer));<br>    assert(rc == (<span class="hljs-built_in">strlen</span>(buffer)));<br>    fsync(fd);<br>    close(fd);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>该程序发出三个调用来实现了一个文件的写入，文件系统的实际写入过程如下：</p><pre><code class=" mermaid">graph LR;确定数据的驻留位置  --&gt; 发出IO请求 --&gt; 读取现有结构 --&gt; 在文件系统中对位置进行记录</code></pre><p><strong><em>出于性能原因，IO操作会延迟进行。为了预防IO操作中发生系统异常，多数文件系统拥有日志（journaling）或写时复制（copy-on-write）这些复杂的写入协议。为了使不同的同游操作更有效，文件系统采用了不同的数据结构和访问方法，从简单的列表到B-TREE。</em></strong></p><h3 id="操作系统设计目标"><a href="#操作系统设计目标" class="headerlink" title="操作系统设计目标"></a>操作系统设计目标</h3><h4 id="操作系统主要功能"><a href="#操作系统主要功能" class="headerlink" title="操作系统主要功能"></a>操作系统主要功能</h4><ul><li><strong><em>取得物理资源并进行虚拟化</em></strong></li><li><strong><em>处理并发</em></strong></li><li><strong><em>持久化存储文件</em></strong></li></ul><p>最基本目标：<strong><em>建立抽象</em></strong></p><p>抽象使编写大型程序称为可能，下面是一个简单的抽象过程：</p><pre><code class=" mermaid">graph LR;晶体管 --&gt; 逻辑门 --&gt; 汇编语言 --&gt; 高级程序语言</code></pre><ul><li>提供高性能</li><li>在程序与OS之间提供保护</li><li>可以不间断运行</li><li>安全性</li><li>移动性</li><li>…………</li></ul>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统实战环境搭建</title>
    <link href="/2021/08/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/08/04/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p><strong>本系列使用bochs虚拟机进行操作系统的开发 参考教材《操作系统真相还原》、《操作系统导论》、《操作系统导论》、《计算机体系结构一量化研究方法》等</strong></p><p><strong>bochs虚拟机在windows环境下也可运行 实际开发过程中可以用Cygwin64工具在windows端实现unix端的操作（该方案经过本人的简单尝试 理论上可以实现 有兴趣的可以自己尝试摸索）</strong></p><h3 id="各类Linux服务介绍"><a href="#各类Linux服务介绍" class="headerlink" title="各类Linux服务介绍"></a>各类Linux服务介绍</h3><p><strong><em>目前可以使用以下几种linux虚拟机方案\</em></strong></p><h4 id="一-使用云服务器"><a href="#一-使用云服务器" class="headerlink" title="一.使用云服务器"></a>一.使用云服务器</h4><ul><li><strong>使用例如腾讯云，阿里云一类的云服务器</strong></li></ul><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>1.云服务器一般使用本地SSH工具连接，占用资源较少</li><li>2.云服务器的镜像一般都已经配置好了，为不熟悉linux的小白省去很多麻烦</li><li>3.拥有自己的服务器可以做很多事，例如可以搭建自己的个人网站</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>1.收费（一般还很很贵），本人618期间购买的2核2G阿里云服务器一年使用权价格高达99RMB</li><li>2.云服务器一般不支持GUI，bochs虚拟机需要对GUI的支持，需要自己在服务器端配置GUI之后使用VNC VIEWER（收费，而且很贵）、Xmanager（收费、而且特别贵）等工具进行连接，配置过程极其繁琐</li></ul><h4 id="二-使用虚拟机"><a href="#二-使用虚拟机" class="headerlink" title="二.使用虚拟机"></a>二.使用虚拟机</h4><ul><li><strong>使用Vitual Box(免费)、VmWare(收费)、Hyper-V(windows专业版自带)等虚拟机程序</strong></li></ul><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><ul><li>1.图形化界面，适合习惯windows的使用者</li><li>2.<strong><em>免费\</em></strong></li></ul><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ul><li>1.占用本地资源较多，部分低配置电脑可能会比较卡顿</li><li>2.对于一些爱折腾电脑的geek来说，一些操作可能会导致虚拟机软件虚拟化失效</li></ul><h4 id="三-使用WSL"><a href="#三-使用WSL" class="headerlink" title="三.使用WSL"></a>三.使用WSL</h4><ul><li>关于WSL，详情见WSL官方文档：<a href="https://docs.microsoft.com/zh-cn/windows/wsl/">适用于 Linux 的 Windows 子系统文档 | Microsoft Docs</a></li></ul><h5 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h5><ul><li>1.嵌入在windows中的Linux，用了都说好</li><li>2.<strong>提高文件系统性能</strong>，</li><li>3.<strong>支持完全的系统调用兼容性</strong>。</li></ul><h5 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h5><ul><li>1.和云服务器一样不支持GUI,需要自己安装GUI，或者升级到较高版本的windows10或者Windows11完成对Linux内核的更新</li></ul><p><strong><em>总结：对于普通用户最好的选择就是使用VitualBox 由于本人已经升级预览版Windows11 下面为大家介绍如何在WSL2G中进行Bochs环境配置\</em></strong>（对于VitualBox的使用可自行百度，可以找到很多文章 ）</p><h3 id="Bochs环境配置"><a href="#Bochs环境配置" class="headerlink" title="Bochs环境配置"></a>Bochs环境配置</h3><ul><li>关于WSL的安装，可参考官方文档：<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10">在 Windows 10 上安装 WSL | Microsoft Docs</a></li></ul><h4 id="一-环境配置"><a href="#一-环境配置" class="headerlink" title="一.环境配置"></a>一.环境配置</h4><h5 id="1-换源"><a href="#1-换源" class="headerlink" title="1.换源"></a>1.换源</h5><p>对于新安装的Linux系统需要对apt源进行配置，推荐使用TUNA源：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">ubuntu | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a>（其他linux发行版可以自行在TUNA网站寻找）</p><p>使用vim打开镜像文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo vi /etc/apt/sources.list<br></code></pre></div></td></tr></table></figure><p>单击esc键进入命令模式，输入ggVG可以全部选中，删除选中的镜像列表（不嫌麻烦的也可以用退格或者del键一行行删除）</p><p>将下列镜像列表粘贴进镜像文件中</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse<br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse<br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse<br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse<br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><br><span class="hljs-comment"># 预发布软件源，不建议启用</span><br><span class="hljs-comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br></code></pre></div></td></tr></table></figure><p>点击esc进入命令模式，按如下过程操作：</p><ul><li>输入冒号 ：</li><li>输入wq！命令</li><li>单击回车键(enter)</li><li>此时应该已经回到linux的shell界面 输入如下命令更新镜像列表</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt updata<br></code></pre></div></td></tr></table></figure><h5 id="2-安装必备软件"><a href="#2-安装必备软件" class="headerlink" title="2.安装必备软件"></a>2.安装必备软件</h5><p><strong><em>安装编译bochs需要的工具</em></strong></p><ul><li>g++</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install g++ <br></code></pre></div></td></tr></table></figure><ul><li>make</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install make<br></code></pre></div></td></tr></table></figure><ul><li>可视化库</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo apt-get install libx11-dev xserver-xorg-dev xorg-dev<br></code></pre></div></td></tr></table></figure><h5 id="3-bochs安装"><a href="#3-bochs安装" class="headerlink" title="3.bochs安装"></a>3.bochs安装</h5><ul><li>在<strong><em>SOURCEFORGE\</em></strong>上可以查看已发行的bochs版本:<a href="https://sourceforge.net/projects/bochs/files/bochs/">Bochs x86 PC emulator - Browse /bochs at SourceForge.net</a></li></ul><p>用weget命令拉取所需要的bochs压缩包（可以自行选择需要的版本）</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget https://sourceforge.net/projects/bochs/files/bochs/2.6.11/bochs-2.6.11.tar.gz<br></code></pre></div></td></tr></table></figure><ul><li><strong><em>注:所拉取的文件一定是以tar.gz为后缀\</em></strong></li></ul><p><strong>解压并切换到文件夹下</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tar zxvf bochs-2.6.11.tar.gz<br><span class="hljs-built_in">cd</span> bochs-2.6.11/<br></code></pre></div></td></tr></table></figure><p><strong>添加配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">./configure \<br>--prefix=/your_path/bochs \<br>--enable-debugger \<br>--enable-disasm \<br>--enable-iodebug \<br>--enable-x86-debugger \<br>--with-x \<br>--with-x11<br></code></pre></div></td></tr></table></figure><p>说明一下 configure 里的参数<br>—prefix=/your_path/bochs 指定 bochs 安装目录，将 your_path 替换为你自己的目录，或者不使用这个参数，安装到默认目录。<br>—enable-debugger 打开 bochs 自己的调试器<br>—enable-disasm 使 bochs 支持反汇编<br>—enable-iodebug 启用 io 接口调试器<br>—enable-x86-debugger 支持 x86 调试器<br>—with-x 使用 x windows<br>—with-x11 使用 x11 图形用户接口</p><p><strong><em>关于bochs安装目录的选择：WSL挂载在windows系统硬盘下 建议选额WSL挂载的根目录 打开WSL界面 蓝色的字体即为当前机器WSL系统挂载的硬盘位置</em></strong></p><p><img src="/img/os/00/01.png" alt=""></p><ul><li>对应参数即为</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">--prefix=/mnt/c/Users/10303/bochs<br></code></pre></div></td></tr></table></figure><p><strong><em>完成配置后进行编译和安装</em></strong></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo make<br>sudo make install<br></code></pre></div></td></tr></table></figure><h5 id="4-bochs的配置"><a href="#4-bochs的配置" class="headerlink" title="4.bochs的配置"></a>4.bochs的配置</h5><ul><li>退回wsl根目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ..<br></code></pre></div></td></tr></table></figure><ul><li>使用ls命令查看当前文件夹下的内容，如果安装成功就可以在根目录下看到bochs文件夹</li></ul><p><img src="/img/os/00/02.png" alt=""></p><ul><li>进入bochs安装文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> bochs<br></code></pre></div></td></tr></table></figure><ul><li>新建bochs配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo vi <span class="hljs-string">&quot;配置文件名&quot;</span><br></code></pre></div></td></tr></table></figure><ul><li>将配置文件内容粘贴到文件中 修改实际路径 实际路径即之前提到的安装目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#第一步，首先设置 Bochs 在运行过程中能够使用的内存，本例为 32MB </span><br>megs: 32 <br><br><span class="hljs-comment">#第二步，设置对应真实机器的 BIOS 和 VGA BIOS </span><br>romimage: file=/实际路径/bochs/share/bochs/BIOS-bochs-latest <br>vgaromimage: file=/实际路径/bochs/share/bochs/VGABIOS-lgpl-latest <br><br><span class="hljs-comment">#第三步，设置 Bochs 所使用的磁盘，软盘的关键字为 floppy。 </span><br><span class="hljs-comment">#若只有一个软盘，则使用 floppya 即可，若有多个，则为 floppya，floppyb… </span><br><span class="hljs-comment">#floppya: 1_44=a.img, status=inserted </span><br><br><span class="hljs-comment">#第四步，选择启动盘符 </span><br><span class="hljs-comment">#boot: floppy #默认从软盘启动，将其注释 </span><br>boot: disk <span class="hljs-comment">#改为从硬盘启动。我们的任何代码都将直接写在硬盘上，所以不会再有读写软盘的操作 </span><br><br><span class="hljs-comment">#第五步，设置日志文件的输出 </span><br><span class="hljs-built_in">log</span>: bochsout.txt <br><br><span class="hljs-comment">#第六步，开启或关闭某些功能 </span><br><span class="hljs-comment">#下面是关闭鼠标，并打开键盘 </span><br>mouse: enabled=0 <br>keyboard: keymap=/实际路径/bochs/share/bochs/keymaps/x11-pc-us.map <br><br><span class="hljs-comment"># 硬盘设置 </span><br>ata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14<br></code></pre></div></td></tr></table></figure><p>输入<strong><em>bin/bochs</em></strong>启动虚拟机</p><p><img src="/img/os/00/03.png" alt=""></p><ul><li>默认选项为【2】读取配置文件，单击回车键会要求输入配置文件名 输入后单击回车键 如果没有错误默认选项就会变成【6】 如下图所示</li></ul><p><img src="/img/os/00/04.png" alt=""></p><ul><li>回车键启动bochs（此时的bochs界面是空的） 在linux的界面中输入exit即可退出</li></ul><p><img src="/img/os/00/05.png" alt=""></p><h5 id="5-创建虚拟硬盘"><a href="#5-创建虚拟硬盘" class="headerlink" title="5.创建虚拟硬盘"></a>5.创建虚拟硬盘</h5><ul><li>最后需要为bochs创建虚拟硬盘 在bochs安装根目录下使用如此下命令 也可以输入bin/bximage —help查看参数后自定义参数 这里创建一个60m的虚拟硬盘</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">bin/bximage -mode=<span class="hljs-string">&quot;create&quot;</span> -hd=60 -imgmode=<span class="hljs-string">&quot;flat&quot;</span> -q hd60M.img<br></code></pre></div></td></tr></table></figure><p>按照提示将对应的语句添加到bochs配置文件中保存就完成了bochs的完整安装配置</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>实战类</category>
      
      <category>操作系统实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git使用注意及常用命令</title>
    <link href="/2021/01/26/Git%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/01/26/Git%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Git使用注意及常用命令"><a href="#Git使用注意及常用命令" class="headerlink" title="Git使用注意及常用命令"></a>Git使用注意及常用命令</h1><h2 id="git设置用户信息"><a href="#git设置用户信息" class="headerlink" title="git设置用户信息"></a>git设置用户信息</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git config --global user.name <span class="hljs-string">&quot;Your Name&quot;</span></span><br><span class="hljs-meta">$</span><span class="bash"> git config --global user.email <span class="hljs-string">&quot;email@example.com&quot;</span></span><br></code></pre></div></td></tr></table></figure><p><strong><em>不带后缀的命令可以查看本机用户信息</em></strong></p><hr><ul><li>将目录变为Git可管理的仓库</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git init</span><br></code></pre></div></td></tr></table></figure><h2 id="将文件添加到版本库"><a href="#将文件添加到版本库" class="headerlink" title="将文件添加到版本库"></a>将文件添加到版本库</h2><ul><li>将文件添加到仓库</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git add filename</span><br></code></pre></div></td></tr></table></figure><ul><li>将文件提交到仓库</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git commit -m <span class="hljs-string">&quot;提交备注，为了代码规范必填&quot;</span></span><br></code></pre></div></td></tr></table></figure><ul><li>git命令必须在git仓库内执行</li><li>注意添加文件时文件是否存在</li></ul><hr><h2 id="时光机穿梭"><a href="#时光机穿梭" class="headerlink" title="时光机穿梭"></a>时光机穿梭</h2><ul><li>git status命令可以查看仓库当前状态</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">10303@DESKTOP-9B9NUVT MINGW64 /d/myHub/OnlineJudge (master)<br><span class="hljs-meta">$</span><span class="bash"> git status</span><br>On branch master<br>Changes not staged for commit:<br>  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)<br>  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)<br>        modified:   readme.md<br><br>no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)<br><br></code></pre></div></td></tr></table></figure><ul><li>查看文件具体被修改的内容</li></ul><p><strong>git diff “filename”</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git diff <span class="hljs-string">&quot;readme.md&quot;</span></span><br>diff --git a/readme.md b/readme.md<br>index c8a8781..699d945 100644<br>--- a/readme.md<br>+++ b/readme.md<br>@@ -1,2 +1,7 @@<br><span class="hljs-meta"> #</span><span class="bash"> 记录本人不定期的OJ刷题记录</span><br><br>+##### 目前已有<br>+<br>++ LuoGu<br>++ AcWing<br>++ PTA<br>\ No newline at end of file<br><br></code></pre></div></td></tr></table></figure><hr><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><ul><li>查看历史纪录</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span></span><br>commit bbedeb9a6cced4d2ec9449525af3d1d487e5eedf (HEAD -&gt; master)<br>Author: CHENTHIRTEEN &lt;1030339437@qq.com&gt;<br>Date:   Tue Jan 26 13:06:06 2021 +0800<br><br>    add som distributed<br><br>commit 7d599a92c034fed30e7c75539503189a19e269ec<br>Author: CHENTHIRTEEN &lt;1030339437@qq.com&gt;<br>Date:   Tue Jan 26 13:03:44 2021 +0800<br><br>    add som distributed<br><br>commit c71a269f75f080bfd168ea2e14c586d6a93e49f6<br>Author: CHENTHIRTEEN &lt;1030339437@qq.com&gt;<br>Date:   Tue Jan 26 12:39:36 2021 +0800<br><br>    add a readme file<br><br></code></pre></div></td></tr></table></figure><p><font color="red">git log</font>从最近到最远显示提交日志</p><ul><li>带—pretty=oneline参数</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span> --pretty=oneline</span><br>bbedeb9a6cced4d2ec9449525af3d1d487e5eedf (HEAD -&gt; master) add som distributed<br>7d599a92c034fed30e7c75539503189a19e269ec add som distributed<br>c71a269f75f080bfd168ea2e14c586d6a93e49f6 add a readme file<br><br></code></pre></div></td></tr></table></figure><ul><li><p><strong>git中HEAD表示当前版本上个版本为HEAD^N个版本为HEAD~N</strong></p></li><li><p>回退命令</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git reset --hard HEAD~2</span><br>HEAD is now at c71a269 add a readme file<br></code></pre></div></td></tr></table></figure><ul><li>回退后再次使用git log</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">log</span></span><br>commit c71a269f75f080bfd168ea2e14c586d6a93e49f6 (HEAD -&gt; master)<br>Author: CHENTHIRTEEN &lt;1030339437@qq.com&gt;<br>Date:   Tue Jan 26 12:39:36 2021 +0800<br><br>    add a readme file<br></code></pre></div></td></tr></table></figure><ul><li>窗口未关闭可以使用commit id回到某个版本</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git reset --hard bbedeb</span><br></code></pre></div></td></tr></table></figure><p>commit id取前几位即可</p><ul><li>若关闭了窗口可以通过git reflog查看记录的每一次命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git reflog</span><br>c71a269 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to HEAD~2<br>bbedeb9 HEAD@&#123;1&#125;: commit: add som distributed<br>7d599a9 HEAD@&#123;2&#125;: commit: add som distributed<br>c71a269 (HEAD -&gt; master) HEAD@&#123;3&#125;: commit (initial): add a readme file<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发工具</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试</title>
    <link href="/2020/03/25/%E6%B5%8B%E8%AF%95/"/>
    <url>/2020/03/25/%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="这是一个测试页面"><a href="#这是一个测试页面" class="headerlink" title="这是一个测试页面"></a>这是一个测试页面</h1><p><strong><em>欢迎来玩</em></strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
